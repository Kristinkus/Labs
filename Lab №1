#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <locale.h>
#include <stdlib.h>

void verification(FILE* fp); // проверка
void file_bin_write(FILE* fp); // ввод
void file_bin_read(FILE* fp); // чтение
void sort_num(FILE* fp); //бабле сорт
int val_count(FILE* file); // подсчет уникальных значений
void revers(FILE* file); // реверс
void sec_cort(FILE* file, int tell); повторная сортировка
void insertNumberAtPosition(const char* filename, int number); // вставка числа(анюзебл)

int main() {
    setlocale(LC_ALL, "rus");

    const char* my_file = "my_file.bin";
    FILE* fp;

    fp = fopen(my_file, "wb");
    verification(fp);
    file_bin_write(fp);
    int tell = ftell(fp)/sizeof(int);
    fclose(fp);
    fflush(fp);
    rewind(stdin);

    fp = fopen(my_file, "r+b");
    verification(fp);
    sort_num(fp);
    fclose(fp);

    fp = fopen(my_file, "rb");
    verification(fp);
    file_bin_read(fp);

    fclose(fp);

    fp = fopen(my_file, "rb");
    verification(fp);
    int count = val_count(fp);
    printf("Количество различных значений: %d\n", count);
    fclose(fp);


    fp = fopen(my_file, "ab");

    verification(fp);
    file_bin_write(fp);
    fclose(fp);
    rewind(stdin);

    fp = fopen(my_file, "r+b");
    verification(fp);
    sec_cort(fp, tell);
    fclose(fp);

    fp = fopen(my_file, "rb");
    verification(fp);
    file_bin_read(fp);
    fclose(fp);

   
    fp = fopen(my_file, "r+b");
    verification(fp);
    revers(fp);
    fclose(fp);

    
    fp = fopen(my_file, "rb");
    verification(fp);
    file_bin_read(fp);
    fclose(fp);

    return 0;
}

void verification(FILE* fp) {
    if (fp == NULL) {
        perror("Ошибка открытия файла");
        exit(1);
    }
}

void file_bin_write(FILE* fp) {
    int value;
    puts("Заполните файл целыми числами. Для окончания введите нечисловое значение");
    printf("Введите число: ");
    while (1) {
        if (scanf("%d", &value) != 1) {
            break;
        }

        if (fwrite(&value, sizeof(int), 1, fp) != 1) {
            perror("Ошибка записи данных в файл");
            fclose(fp);
            return;
        }
    }

    
}

void file_bin_read(FILE* fp) {
    
    int number;
    while (fread(&number, sizeof(int), 1, fp) == 1) {
        printf("%d ", number);
    }
    printf("\n");
}

int val_count(FILE* fp) {
    
    int number, count = 0;
    int last_number = -1; 
    while (fread(&number, sizeof(int), 1, fp) == 1) {
        if (number != last_number) {
            count++;
            last_number = number;
        }
    }
    rewind(fp);
    return count;
}

void revers(FILE* file) {
    fseek(file, 0, SEEK_END);
    int size = ftell(file) / sizeof(int);
    rewind(file);
    for (int i = 0; i < size / 2; i++) {
        int a, b;
        
        fseek(file, i * sizeof(int), SEEK_SET);
        fread(&a, sizeof(int), 1, file);
        
        fseek(file, (size - 1 - i) * sizeof(int), SEEK_SET);
        fread(&b, sizeof(int), 1, file);
       
        fseek(file, i * sizeof(int), SEEK_SET);
        fwrite(&b, sizeof(int), 1, file);
        fseek(file, (size - 1 - i) * sizeof(int), SEEK_SET);
        fwrite(&a, sizeof(int), 1, file);
    }
}


void insertNumberAtPosition(const char* filename, int number) {
    FILE* file = fopen(filename, "a+b");

    if (file == NULL) {
        printf("Не удалось открыть файл %s\n", filename);
        return;
    }

    fseek(file, 0, SEEK_END);
    long fileSize = ftell(file);
    int elementCount = fileSize / sizeof(int);

    int left, right;
    int position = 0;

    fseek(file, 0, SEEK_SET);

    while (fread(&left, sizeof(int), 1, file) == 1) {
        if (fread(&right, sizeof(int), 1, file) != 1) {
            right = number - 1;
        }

        if (left <= number && number <= right) {
            fseek(file, position * sizeof(int), SEEK_SET);
            fwrite(&number, sizeof(int), 1, file);
            break;
        }

        fseek(file, -1 * sizeof(int), SEEK_CUR);
        position++;
    }

    if (position == elementCount) {
        fwrite(&number, sizeof(int), 1, file);
    }

    fclose(file);
}

void sort_num(FILE* file) {
    fseek(file, 0, SEEK_END);
    int size = ftell(file) / sizeof(int);
    rewind(file);

    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            int a, b;
            fseek(file, j * sizeof(int), SEEK_SET);
            fread(&a, sizeof(int), 1, file);
            fread(&b, sizeof(int), 1, file);

            if (a < b) {
                fseek(file, j * sizeof(int), SEEK_SET);
                fwrite(&b, sizeof(int), 1, file);
                fwrite(&a, sizeof(int), 1, file);
            }
        }
    }
}


void sec_cort(FILE* file, int tell)
{
    fseek(file, tell, SEEK_END);
    int size = ftell(file) / sizeof(int);
    rewind(file);

    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            int a, b;
            fseek(file, j * sizeof(int), SEEK_SET);
            fread(&a, sizeof(int), 1, file);
            fread(&b, sizeof(int), 1, file);

            if (a < b) {
                fseek(file, j * sizeof(int), SEEK_SET);
                fwrite(&b, sizeof(int), 1, file);
                fwrite(&a, sizeof(int), 1, file);
            }
        }
    }
}
    
